#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.

### Linting
printf "\n%s\n" "Pre-push hook activated."
printf "%s\n" "Linting..."
yapf -ir . --exclude '*ipynb*' --exclude .venv
isort . --atomic --skip-glob "*ipynb*" --line-width 99
printf "%s\n" "Linting completed."

### Testing
printf "\n%s\n" "Executing tests..."
start_tests=$(date +%s)
coverage run -m  pytest --durations=0
test_status=$?
end_tests=$(date +%s)
printf "\n%s\n\n\n" "Testing completed for "$(($end_tests-$start_tests))" seconds."

### Coverage
coverage report | tee /dev/tty | grep TOTAL | awk '{if (int(substr($4, 1, length($4)-1)) < int(93)){print "\nCode coverage test failed. Expected 93%, got "$4"\n"; exit 1} else {print "\nCode coverage test successful.\n"; exit 0}}'
coverage_status=$?

### MyPy
printf "\n%s\n" "Mypy results below:"
mypy . --exclude .venv --install-types --non-interactive # optionally, add: --ignore-missing-imports
mypy_status=$?

### Exiting
if [ "$test_status" -ge "$coverage_status" ]; then hook_status="$test_status"; else hook_status="$coverage_status"; fi
if [ "$test_status" -ne 0 ]; then printf "%s\n" "There are failed tests."; fi
exit $hook_status
